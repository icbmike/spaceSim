uniform float time;

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  {
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i);
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
  }

#define PHONG
varying vec3 vViewPosition;
varying vec3 vNormal;
#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )

  varying vec2 vUv;
  uniform vec4 offsetRepeat;

#endif

#ifdef USE_LIGHTMAP

  varying vec2 vUv2;

#endif
#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )

  varying vec3 vReflect;

  uniform float refractionRatio;

#endif

#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )

  varying vec3 vWorldPosition;

#endif

#ifdef USE_COLOR

  varying vec3 vColor;

#endif
#ifdef USE_MORPHTARGETS

  #ifndef USE_MORPHNORMALS

  uniform float morphTargetInfluences[ 8 ];

  #else

  uniform float morphTargetInfluences[ 4 ];

  #endif

#endif
#ifdef USE_SKINNING

  uniform mat4 bindMatrix;
  uniform mat4 bindMatrixInverse;

  #ifdef BONE_TEXTURE

    uniform sampler2D boneTexture;
    uniform int boneTextureWidth;
    uniform int boneTextureHeight;

    mat4 getBoneMatrix( const in float i ) {

      float j = i * 4.0;
      float x = mod( j, float( boneTextureWidth ) );
      float y = floor( j / float( boneTextureWidth ) );

      float dx = 1.0 / float( boneTextureWidth );
      float dy = 1.0 / float( boneTextureHeight );

      y = dy * ( y + 0.5 );

      vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
      vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
      vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
      vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );

      mat4 bone = mat4( v1, v2, v3, v4 );

      return bone;

    }

  #else

    uniform mat4 boneGlobalMatrices[ MAX_BONES ];

    mat4 getBoneMatrix( const in float i ) {

      mat4 bone = boneGlobalMatrices[ int(i) ];
      return bone;

    }

  #endif

#endif

#ifdef USE_SHADOWMAP

  varying vec4 vShadowCoord[ MAX_SHADOWS ];
  uniform mat4 shadowMatrix[ MAX_SHADOWS ];

#endif
#ifdef USE_LOGDEPTHBUF

  #ifdef USE_LOGDEPTHBUF_EXT

    varying float vFragDepth;

  #endif

  uniform float logDepthBufFC;

#endif
void main() {
#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )

  vUv = uv * offsetRepeat.zw + offsetRepeat.xy;

#endif
#ifdef USE_LIGHTMAP

  vUv2 = uv2;

#endif
#ifdef USE_COLOR

  #ifdef GAMMA_INPUT

    vColor = color * color;

  #else

    vColor = color;

  #endif

#endif
#ifdef USE_MORPHNORMALS

  vec3 morphedNormal = vec3( 0.0 );

  morphedNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];
  morphedNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];
  morphedNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];
  morphedNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];

  morphedNormal += normal;

#endif
#ifdef USE_SKINNING

  mat4 boneMatX = getBoneMatrix( skinIndex.x );
  mat4 boneMatY = getBoneMatrix( skinIndex.y );
  mat4 boneMatZ = getBoneMatrix( skinIndex.z );
  mat4 boneMatW = getBoneMatrix( skinIndex.w );

#endif
#ifdef USE_SKINNING

  mat4 skinMatrix = mat4( 0.0 );
  skinMatrix += skinWeight.x * boneMatX;
  skinMatrix += skinWeight.y * boneMatY;
  skinMatrix += skinWeight.z * boneMatZ;
  skinMatrix += skinWeight.w * boneMatW;
  skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;

  #ifdef USE_MORPHNORMALS

  vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );

  #else

  vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );

  #endif

#endif

#ifdef USE_SKINNING

  vec3 objectNormal = skinnedNormal.xyz;

#elif defined( USE_MORPHNORMALS )

  vec3 objectNormal = morphedNormal;

#else

  vec3 objectNormal = normal;

#endif

#ifdef FLIP_SIDED

  objectNormal = -objectNormal;

#endif

vec3 transformedNormal = normalMatrix * objectNormal;

  vNormal = normalize( transformedNormal );
#ifdef USE_MORPHTARGETS

  vec3 morphed = vec3( 0.0 );
  morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];
  morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];
  morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];
  morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];

  #ifndef USE_MORPHNORMALS

  morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];
  morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];
  morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];
  morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];

  #endif

  morphed += position;

#endif
#ifdef USE_SKINNING

  #ifdef USE_MORPHTARGETS

  vec4 skinVertex = bindMatrix * vec4( morphed, 1.0 );

  #else

  vec4 skinVertex = bindMatrix * vec4( position, 1.0 );

  #endif

  vec4 skinned = vec4( 0.0 );
  skinned += boneMatX * skinVertex * skinWeight.x;
  skinned += boneMatY * skinVertex * skinWeight.y;
  skinned += boneMatZ * skinVertex * skinWeight.z;
  skinned += boneMatW * skinVertex * skinWeight.w;
  skinned  = bindMatrixInverse * skinned;

#endif

#ifdef USE_SKINNING

  vec4 mvPosition = modelViewMatrix * skinned;

#elif defined( USE_MORPHTARGETS )

  vec4 mvPosition = modelViewMatrix * vec4( morphed, 1.0 );

#else

  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );

#endif

gl_Position = projectionMatrix * mvPosition;

#ifdef USE_LOGDEPTHBUF

  gl_Position.z = log2(max(1e-6, gl_Position.w + 1.0)) * logDepthBufFC;

  #ifdef USE_LOGDEPTHBUF_EXT

    vFragDepth = 1.0 + gl_Position.w;

#else

    gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;

  #endif

#endif
  vViewPosition = -mvPosition.xyz;
#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )

  #ifdef USE_SKINNING

    vec4 worldPosition = modelMatrix * skinned;

  #elif defined( USE_MORPHTARGETS )

    vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );

  #else

    vec4 worldPosition = modelMatrix * vec4( position, 1.0 );

  #endif

#endif

#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )

  vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;
  worldNormal = normalize( worldNormal );

  vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );

  #ifdef ENVMAP_MODE_REFLECTION

    vReflect = reflect( cameraToVertex, worldNormal );

  #else

    vReflect = refract( cameraToVertex, worldNormal, refractionRatio );

  #endif

#endif

#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )

  vWorldPosition = worldPosition.xyz;

#endif
#ifdef USE_SHADOWMAP

  for( int i = 0; i < MAX_SHADOWS; i ++ ) {

    vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;

  }

#endif

  vec3 newPosition = position * clamp(snoise(position * (0.3 * (time) + 1.0)), 0.6, 0.7);
    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);

}
